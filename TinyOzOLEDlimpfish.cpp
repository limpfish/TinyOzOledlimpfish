/*
  OzOLED.cpp - 0.96' I2C 128x64 OLED Driver Library
  2014 Copyright (c) OscarLiang.net  All right reserved.
 
  Author: Oscar Liang
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  
  Uses TinyWireM instead of Wire llibrary. For Attiny processors
  Change done by Andreas Spiess, sensorsiot@gmail.com

*/




#include "TinyOzOLEDlimpfish.h"
#include <TinyWireM.h>
#include <avr/pgmspace.h>


// 8x8 Font ASCII 32 - 127 Implemented
// Users can modify this to support more characters(glyphs)
// BasicFont is placed in code memory.


// This font be freely used without any restriction(It is placed in public domain)
const byte BasicFont[][8] PROGMEM = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00},
	{0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00},
	{0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00},
	{0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00},
	{0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00},
	{0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00},
	{0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00},
	{0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00},
	{0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00},
	{0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00},
	{0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00}, // 0
	{0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00},
	{0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00},
	{0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00},
	{0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00},
	{0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00},
	{0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00},
	{0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00},
	{0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00},
	{0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00},
	{0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00},
	{0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00},
	{0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00},
	{0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00},
	{0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00},
	{0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00},
	{0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00},
	{0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00},
	{0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00},
	{0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00},
	{0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00},
	{0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00},
	{0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00},
	{0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00},
	{0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00},
	{0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00},
	{0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00},
	{0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00},
	{0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00},
	{0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00},
	{0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00},
	{0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00},
	{0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00},
	{0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00},
	{0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00},
	{0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00},
	{0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00},
	{0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00},
	{0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00},
	{0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00},
	{0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00},
	{0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00},
	{0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00},
	{0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00},
	{0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00},
	{0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00},
	{0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00},
	{0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00},
	{0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00},
	{0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00},
	{0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00},
	{0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00},
	{0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00},
	{0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00},
	{0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00},
	{0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00},
	{0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00},
	{0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00},
	{0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00},
	{0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00},
	{0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00},
	{0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00},
	{0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00},
	{0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00},
	{0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00},
	{0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00},
	{0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00},
	{0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00},
	{0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00},
	{0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00},
	{0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00},
	{0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00},
	{0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00},
	{0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00},
	{0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00} 
};



// 12 x16 font
const byte BiggerFont[][24] PROGMEM = {

{ 0x00,0x00,0xf0,0xf8,0x1c,0x0c,0x0c,0x1c,0xf8,0xf0,0x00,0x00,      0x00,0x00,0x0f,0x1f,0x38,0x30,0x30,0x38,0x1f,0x0f,0x00,0x00}, //  0
{ 0x00,0x00,0x60,0x30,0x18,0xfc,0xfc,0x00,0x00,0x00,0x00,0x00,      0x00,0x00,0x00,0x00,0x00,0x3f,0x3f,0x00,0x00,0x00,0x00,0x00}, //  1
{ 0x00,0x00,0x30,0x38,0x1c,0x0c,0x0c,0x8c,0xf8,0x70,0x00,0x00,      0x00,0x00,0x30,0x38,0x3c,0x36,0x37,0x33,0x31,0x30,0x00,0x00}, //  2
{ 0x00,0x00,0x10,0x18,0x1c,0xcc,0xcc,0xcc,0xfc,0x38,0x00,0x00,      0x00,0x00,0x0c,0x1c,0x38,0x30,0x30,0x39,0x1f,0x0f,0x00,0x00}, //  3
{ 0x00,0x00,0x00,0x00,0xc0,0xe0,0x38,0xfc,0xfc,0x00,0x00,0x00,      0x00,0x00,0x0e,0x0f,0x0d,0x0c,0x0c,0x3f,0x3f,0x0c,0x00,0x00}, //  4
{ 0x00,0x00,0xe0,0xfc,0xdc,0xcc,0xcc,0xcc,0x8c,0x00,0x00,0x00,      0x00,0x00,0x0d,0x1d,0x38,0x30,0x30,0x39,0x1f,0x0f,0x00,0x00}, //  5
{ 0x00,0x00,0xe0,0xf8,0x9c,0xcc,0xcc,0xcc,0x9c,0x18,0x00,0x00,      0x00,0x00,0x07,0x1f,0x39,0x30,0x30,0x31,0x1f,0x0f,0x00,0x00}, //  6
{ 0x00,0x00,0x0c,0x0c,0x0c,0x8c,0xec,0x7c,0x1c,0x0c,0x00,0x00,      0x00,0x00,0x00,0x00,0x3c,0x3f,0x07,0x00,0x00,0x00,0x00,0x00}, //  7
{ 0x00,0x00,0x70,0xf8,0x8c,0x8c,0x8c,0x8c,0xf8,0x70,0x00,0x00,      0x00,0x00,0x0e,0x1f,0x31,0x31,0x31,0x31,0x1f,0x0e,0x00,0x00}, //  8
{ 0x00,0x00,0xf0,0xf8,0x8c,0x0c,0x0c,0x9c,0xf8,0xe0,0x00,0x00,      0x00,0x00,0x18,0x39,0x33,0x33,0x33,0x39,0x1f,0x07,0x00,0x00}, //  9

{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, //  space  10

{ 0x00,0x00,0x80,0xf0,0x7c,0x0c,0x7c,0xf0,0x80,0x00,0x00,0x00,      0x20,0x3c,0x1f,0x07,0x06,0x06,0x06,0x07,0x1f,0x3c,0x20,0x00}, //  A   11
{ 0x00,0xfc,0xfc,0x8c,0x8c,0x8c,0x8c,0x8c,0xfc,0x78,0x00,0x00,      0x00,0x3f,0x3f,0x31,0x31,0x31,0x31,0x31,0x31,0x1f,0x0e,0x00}, //  B
{ 0x00,0xe0,0xf8,0x38,0x0c,0x0c,0x0c,0x0c,0x1c,0x38,0x10,0x00,      0x00,0x07,0x1f,0x1c,0x30,0x30,0x30,0x30,0x38,0x1c,0x08,0x00}, //  C
{ 0x00,0xfc,0xfc,0x0c,0x0c,0x0c,0x0c,0x0c,0x18,0xf8,0xe0,0x00,      0x00,0x3f,0x3f,0x30,0x30,0x30,0x30,0x30,0x18,0x1f,0x07,0x00}, //  D
{ 0x00,0x00,0xfc,0xfc,0x8c,0x8c,0x8c,0x8c,0x8c,0x8c,0x8c,0x00,      0x00,0x00,0x3f,0x3f,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x00}, //  E
{ 0x00,0x00,0xfc,0xfc,0x8c,0x8c,0x8c,0x8c,0x8c,0x0c,0x00,0x00,      0x00,0x00,0x3f,0x3f,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00}, //  F
{ 0xe0,0xf8,0x38,0x0c,0x0c,0x0c,0x0c,0x0c,0x1c,0x38,0x10,0x00,      0x07,0x1f,0x1c,0x30,0x30,0x30,0x33,0x33,0x3b,0x1f,0x1f,0x00}, //  G
{ 0x00,0xfc,0xfc,0x80,0x80,0x80,0x80,0x80,0x80,0xfc,0xfc,0x00,      0x00,0x3f,0x3f,0x01,0x01,0x01,0x01,0x01,0x01,0x3f,0x3f,0x00}, //  H
{ 0x00,0x00,0x00,0x00,0x00,0xfc,0xfc,0x00,0x00,0x00,0x00,0x00,      0x00,0x00,0x00,0x00,0x00,0x3f,0x3f,0x00,0x00,0x00,0x00,0x00}, //  I
{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xfc,0x00,0x00,      0x00,0x00,0x0c,0x1c,0x38,0x30,0x30,0x38,0x1f,0x0f,0x00,0x00}, //  J
{ 0x00,0xfc,0xfc,0x00,0x80,0xc0,0xe0,0xb0,0x18,0x0c,0x04,0x00,      0x00,0x3f,0x3f,0x03,0x01,0x00,0x01,0x07,0x0e,0x3c,0x30,0x00}, //  K
{ 0x00,0x00,0xfc,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      0x00,0x00,0x3f,0x3f,0x30,0x30,0x30,0x30,0x30,0x30,0x00,0x00 }, //  L
{ 0xfc,0xfc,0x3c,0xf0,0x80,0x00,0x80,0xf0,0x3c,0xfc,0xfc,0x00,      0x3f,0x3f,0x00,0x03,0x1f,0x3c,0x1f,0x03,0x00,0x3f,0x3f,0x00 }, //  M
{ 0x00,0xfc,0xfc,0x38,0x70,0xc0,0x80,0x00,0x00,0xfc,0xfc,0x00,      0x00,0x3f,0x3f,0x00,0x00,0x01,0x03,0x0e,0x1c,0x3f,0x3f,0x00 }, //  N
{ 0xe0,0xf8,0x18,0x0c,0x0c,0x0c,0x0c,0x0c,0x18,0xf8,0xe0,0x00,      0x07,0x1f,0x18,0x30,0x30,0x30,0x30,0x30,0x18,0x1f,0x07,0x00 }, //  O
{ 0x00,0x00,0xfc,0xfc,0x8c,0x8c,0x8c,0x8c,0xdc,0xf8,0x70,0x00,      0x00,0x00,0x3f,0x3f,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00 }, //  P
{ 0xe0,0xf8,0x18,0x0c,0x0c,0x0c,0x0c,0x0c,0x18,0xf8,0xe0,0x00,      0x07,0x1f,0x18,0x30,0x30,0x34,0x3c,0x18,0x3c,0x7f,0x47,0x00 }, //  Q
{ 0x00,0xfc,0xfc,0x8c,0x8c,0x8c,0x8c,0x8c,0xdc,0xf8,0x70,0x00,      0x00,0x3f,0x3f,0x01,0x01,0x01,0x03,0x07,0x1e,0x3c,0x30,0x20 }, //  R
{ 0x00,0x00,0x70,0xf8,0xdc,0xcc,0x8c,0x8c,0x9c,0x38,0x30,0x00,      0x00,0x00,0x0c,0x1c,0x38,0x31,0x31,0x31,0x3b,0x1f,0x0e,0x00 }, //  S
{ 0x00,0x0c,0x0c,0x0c,0x0c,0xfc,0xfc,0x0c,0x0c,0x0c,0x0c,0x00,      0x00,0x00,0x00,0x00,0x00,0x3f,0x3f,0x00,0x00,0x00,0x00,0x00 }, //  T
{ 0x00,0xfc,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xfc,0x00,      0x00,0x0f,0x1f,0x38,0x30,0x30,0x30,0x30,0x38,0x1f,0x0f,0x00 }, //  U
{ 0x04,0x3c,0xf8,0xc0,0x00,0x00,0x00,0xc0,0xf8,0x3c,0x04,0x00,      0x00,0x00,0x01,0x07,0x3f,0x38,0x3f,0x07,0x01,0x00,0x00,0x00 }, //  V
{ 0x1c,0xfc,0xe0,0x00,0xe0,0xfc,0x1c,0xfc,0xe0,0x00,0xe0,0xfc,      0x00,0x03,0x3f,0x3c,0x3f,0x03,0x00,0x03,0x3f,0x3c,0x3f,0x03 }, //  W
{ 0x00,0x0c,0x1c,0x78,0xe0,0xc0,0xe0,0x78,0x1c,0x0c,0x00,0x00,      0x00,0x30,0x38,0x1e,0x07,0x03,0x07,0x1e,0x38,0x30,0x00,0x00 }, //  X
{ 0x00,0x0c,0x1c,0x78,0xe0,0x80,0x80,0xe0,0x78,0x1c,0x0c,0x00,      0x00,0x00,0x00,0x00,0x00,0x3f,0x3f,0x00,0x00,0x00,0x00,0x00 },  //  Y
{ 0x00,0x00,0x00,0x0c,0x0c,0x0c,0xcc,0xec,0x7c,0x1c,0x0c,0x00,      0x00,0x00,0x30,0x38,0x3e,0x37,0x33,0x30,0x30,0x30,0x30,0x00 },  //  Z
{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,      0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00 }  // .

};



// ====================== LOW LEVEL =========================

void OzOLED::sendCommand(byte command){
	TinyWireM.beginTransmission(OLED_ADDRESS); // begin transmitting
	TinyWireM.send(OzOLED_COMMAND_MODE);//data mode
	TinyWireM.send(command);
	TinyWireM.endTransmission();    // stop transmitting
}


void OzOLED::sendBiggerCharData(char C, byte column){
	sendData(pgm_read_byte(&BiggerFont[C-54][column]));
}

void OzOLED::sendData(byte data){
	TinyWireM.beginTransmission(OLED_ADDRESS); // begin transmitting
	TinyWireM.send(OzOLED_DATA_MODE);//data mode
	TinyWireM.send(data);
	TinyWireM.endTransmission();    // stop transmitting
}


void OzOLED::printBiggerChar(char C, byte X, byte Y){

	if ( X < 128 ) setCursorXYPixel(X, Y);

	C-=54; 
	if(C < 0 || C > 38)
		C=10; //


	for(byte i=0; i<12; i++) {
		//read bytes from code memory
		sendData(pgm_read_byte(&BiggerFont[C][i])); 
	}

	setCursorXYPixel(X, Y+1);
	for(byte i=12; i<24; i++) {
		//read bytes from code memory
		sendData(pgm_read_byte(&BiggerFont[C][i])); 
	}
}


void OzOLED::printBiggerString(const char *String, byte X, byte Y, byte numChar){
	//if ( X < 128 )
	//	setCursorXY(X, Y);

	byte count=0;

	while(String[count] && count<numChar){
		printBiggerChar(String[count++],X,Y);
		X+=16;
	}

}



void OzOLED::printChar(char C, byte X, byte Y){

	if ( X < 128 )
		setCursorXY(X, Y);

	//Ignore unused ASCII characters. Modified the range to support multilingual characters.
    if(C < 32 || C > 127)
		C='*'; //star - indicate characters that can't be displayed

	
    for(byte i=0; i<8; i++) {
	
       //read bytes from code memory
       sendData(pgm_read_byte(&BasicFont[C-32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
	 
    }
}

void OzOLED::printString(const char *String, byte X, byte Y, byte numChar){

	if ( X < 128 )
		setCursorXY(X, Y);

	
	byte count=0;
    while(String[count] && count<numChar){
		printChar(String[count++]);  
	}

}


byte OzOLED::printNumber(long long_num, byte X, byte Y){

	if ( X < 128 )
		setCursorXY(X, Y);


	byte char_buffer[10] = "";
	byte i = 0;
	byte f = 0; // number of characters

	if (long_num < 0) {
	
		f++;
		printChar(':'); // prints minus, data after 9 is the -
		long_num = -long_num;
	
	} 
	else
	 if (long_num == 0) {
	
		f++;
		printChar('0');
		return f;
	
	} 

	while (long_num > 0) {
	
		char_buffer[i++] = long_num % 10;
		long_num /= 10;
	
	}

	f += i;
	for(; i > 0; i--) {

		printChar('0'+ char_buffer[i - 1]);

	}
	
	return f;

}




byte OzOLED::printNumber(float float_num, byte prec, byte X, byte Y){

	if ( X < 128 )
		setCursorXY(X, Y);

// prec - 6 maximum

	byte num_int = 0;
	byte num_frac = 0;
	byte num_extra = 0;
	
	long d = float_num; // get the integer part
	float f = float_num - d; // get the fractional part
	
	
	if (d == 0 && f < 0.0){
	
		printChar('-');
		num_extra++;
		printChar('0');
		num_extra++;
		f *= -1;
		
	}
	else if (d < 0 && f < 0.0){
	
		num_int = printNumber(d); // count how many digits in integer part
		f *= -1;
		
	}
	else{
	
		num_int = printNumber(d); // count how many digits in integer part
	
	}
	
	// only when fractional part > 0, we show decimal point
	if (f > 0.0){
	
		printChar('.');
		num_extra++;
	
		long f_shift = 1;
		
		if (num_int + prec > 8) 
			prec = 8 - num_int;
		
		for (byte j=0; j<prec; j++){
			f_shift *= 10;
		}

		num_frac = printNumber((long)(f*f_shift)); // count how many digits in fractional part
		
	}
	
	return num_int + num_frac + num_extra;

}




void OzOLED::drawBitmap(const byte *bitmaparray, byte X, byte Y, byte width, byte height){

// max width = 16
// max height = 8

	setCursorXY( X, Y );
	
	byte column = 0; 
	for(int i=0; i<width*8*height; i++) {  

		sendData(pgm_read_byte(&bitmaparray[i]));
		
		if(++column == width*8) {
			column = 0;
			setCursorXY( X, ++Y );
		} 
	}

}


// =================== High Level ===========================


void OzOLED::init(){
	TinyWireM.begin();
	
/*	// upgrade to 400KHz! (only use when your other i2c device support this speed)
	if (I2C_400KHZ){
		// save I2C bitrate (default 100Khz)
		byte twbrbackup = TWBR;
		TWBR = 12; 
		//TWBR = twbrbackup;
		//Serial.println(TWBR, DEC);
		//Serial.println(TWSR & 0x3, DEC);
	}*/
	
    setPowerOff(); 	//display off
    delay(10);
    setPowerOn();	//display on
    delay(10); 
    setNormalDisplay();  //default Set Normal Display
	setPageMode();	// default addressing mode
	clearDisplay();
	
	// for 128x32 OLED
	sendCommand(0xA8); // Set Multiplexer
	sendCommand(0x1F);
	sendCommand(0xDA); // Com pins
	sendCommand(0x02);
	
	
	setCursorXY(0,0);
	sendCommand(0x8d); //Charge Pump
	sendCommand(0x14);
	

}


void OzOLED::setCursorXYPixel(byte X, byte Y){
	// Y - 1 unit = 1 page (8 pixel rows)
	// X - 1 unit = 8 pixel columns

	sendCommand(0x00 + (X & 0x0F)); 		//set column lower address
	sendCommand(0x10 + ((X>>4)&0x0F)); 	//set column higher address
	sendCommand(0xB0 + Y); 					//set page address
	
}

void OzOLED::setCursorXY(byte X, byte Y){
	// Y - 1 unit = 1 page (8 pixel rows)
	// X - 1 unit = 8 pixel columns

	sendCommand(0x00 + (8*X & 0x0F)); 		//set column lower address
	sendCommand(0x10 + ((8*X>>4)&0x0F)); 	//set column higher address
	sendCommand(0xB0 + Y); 					//set page address
	
}


void OzOLED::clearDisplay()	{


	for(byte page=0; page<8; page++) {	
	
		setCursorXY(0, page);     
		for(byte column=0; column<128; column++){  //clear all columns
			sendData(0);    
		}

	}
	
	setCursorXY(0,0);  
	
}


void OzOLED::setInverseDisplay(){

	sendCommand(OzOLED_CMD_INVERSE_DISPLAY);
	
}

void OzOLED::setNormalDisplay(){

	sendCommand(OzOLED_CMD_NORMAL_DISPLAY);
	
}

void OzOLED::setPowerOff(){

	sendCommand(OzOLED_CMD_DISPLAY_OFF);
	
}

void OzOLED::setPowerOn(){

	sendCommand(OzOLED_CMD_DISPLAY_ON);
	
}

void OzOLED::setBrightness(byte Brightness){

	sendCommand(OzOLED_CMD_SET_BRIGHTNESS);
	sendCommand(Brightness);
   
}

void OzOLED::setPageMode(){
	addressingMode = PAGE_ADDRESSING;
	sendCommand(0x20); 				//set addressing mode
	sendCommand(PAGE_ADDRESSING); 	//set page addressing mode
}

void OzOLED::setHorizontalMode(){
	addressingMode = HORIZONTAL_ADDRESSING;
	sendCommand(0x20); 				//set addressing mode
	sendCommand(HORIZONTAL_ADDRESSING); 	//set page addressing mode
}


// startscrollright
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// scrollRight(0x00, 0x0F)  - start - stop
void OzOLED::scrollRight(byte start, byte end, byte speed){

    sendCommand(OzOLED_RIGHT_SCROLL);  //Horizontal Scroll Setup
    sendCommand(0x00);	// dummy byte 
    sendCommand(start);	// start page address
    sendCommand(speed);	// set time interval between each scroll
    sendCommand(end);	// end page address
	
    sendCommand(0x01);  
    sendCommand(0xFF);
	
    sendCommand(0x2f);  //active scrolling
	
}


// startscrollleft
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F)   - start - stop
void OzOLED::scrollLeft(byte start, byte end, byte speed){

    sendCommand(OzOLED_LEFT_SCROLL);  //Horizontal Scroll Setup
    sendCommand(0x00);	// dummy byte
    sendCommand(start);	// start page address
    sendCommand(speed);	// set time interval between each scroll
    sendCommand(end);	// end page address
	
    sendCommand(0x01);  
    sendCommand(0xFF);  
	
    sendCommand(0x2f);  //active scrolling
	
}


void OzOLED::scrollLeftPixel(byte start, byte end, byte speed){
sendCommand(0x2e);
    sendCommand(CMD_ONE_COLUMN_SCROLL_H_LEFT);  //Horizontal Scroll Setup 1 pixel
    sendCommand(0x00);	// dummy byte
    sendCommand(start);	// start page address
    sendCommand(speed);	// set time interval between each scroll
    sendCommand(end);	// end page address
    sendCommand(0x2f);  //active scrolling

}



// startscrolldiagright
// Activate a diagonal scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void OzOLED::scrollDiagRight(){

        sendCommand(OzOLED_SET_VERTICAL_SCROLL_AREA);        
        sendCommand(0X00);
        sendCommand(OzOLED_Max_Y);
        sendCommand(OzOLED_VERTICAL_RIGHT_SCROLL); //Vertical and Horizontal Scroll Setup
        sendCommand(0X00); 	//dummy byte
        sendCommand(0x00);	 //define page0 as startpage address
        sendCommand(0X00);	//set time interval between each scroll ste as 6 frames
        sendCommand(0x07);	//define page7 as endpage address
        sendCommand(0X01);	//set vertical scrolling offset as 1 row
        sendCommand(OzOLED_CMD_ACTIVATE_SCROLL); //active scrolling
}

void OzOLED::scrollDiagLeft(){

        sendCommand(OzOLED_SET_VERTICAL_SCROLL_AREA);        
        sendCommand(0X00);
        sendCommand(OzOLED_Max_Y);
        sendCommand(OzOLED_VERTICAL_LEFT_SCROLL); //Vertical and Horizontal Scroll Setup
        sendCommand(0X00); //dummy byte
        sendCommand(0x00);	 //define page0 as startpage address
        sendCommand(0X00);	//set time interval between each scroll ste as 6 frames
        sendCommand(0x07);	//define page7 as endpage address
        sendCommand(0X01);	//set vertical scrolling offset as 1 row
        sendCommand(OzOLED_CMD_ACTIVATE_SCROLL); //active scrolling
}


void OzOLED::setDeactivateScroll(){

	sendCommand(OzOLED_CMD_DEACTIVATE_SCROLL);

}




OzOLED OzOled;  // Preinstantiate Objects

